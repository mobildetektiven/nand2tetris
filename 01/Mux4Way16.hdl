// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl
/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];
    
    PARTS:
    And(a=sel[0], b=sel[1], out=andSel);

    Mux(a=a[0], b=b[0], sel=sel[0], out=mux11Out);
    Mux(a=c[0], b=d[0], sel=andSel, out=mux21Out);
    Mux(a=mux11Out, b=mux21Out, sel=sel[1], out=out[0]);

    Mux(a=a[1], b=b[1], sel=sel[0], out=mux12Out);
    Mux(a=c[1], b=d[1], sel=andSel, out=mux22Out);
    Mux(a=mux12Out, b=mux22Out, sel=sel[1], out=out[1]);

    Mux(a=a[2], b=b[2], sel=sel[0], out=mux13Out);
    Mux(a=c[2], b=d[2], sel=andSel, out=mux23Out);
    Mux(a=mux13Out, b=mux23Out, sel=sel[1], out=out[2]);

    Mux(a=a[3], b=b[3], sel=sel[0], out=mux14Out);
    Mux(a=c[3], b=d[3], sel=andSel, out=mux24Out);
    Mux(a=mux14Out, b=mux24Out, sel=sel[1], out=out[3]);

    Mux(a=a[4], b=b[4], sel=sel[0], out=mux15Out);
    Mux(a=c[4], b=d[4], sel=andSel, out=mux25Out);
    Mux(a=mux15Out, b=mux25Out, sel=sel[1], out=out[4]);
    
    Mux(a=a[5], b=b[5], sel=sel[0], out=mux16Out);
    Mux(a=c[5], b=d[5], sel=andSel, out=mux26Out);
    Mux(a=mux16Out, b=mux26Out, sel=sel[1], out=out[5]);
    
    Mux(a=a[6], b=b[6], sel=sel[0], out=mux17Out);
    Mux(a=c[6], b=d[6], sel=andSel, out=mux27Out);
    Mux(a=mux17Out, b=mux27Out, sel=sel[1], out=out[6]);

    Mux(a=a[7], b=b[7], sel=sel[0], out=mux18Out);
    Mux(a=c[7], b=d[7], sel=andSel, out=mux28Out);
    Mux(a=mux18Out, b=mux28Out, sel=sel[1], out=out[7]);

    Mux(a=a[8], b=b[8], sel=sel[0], out=mux19Out);
    Mux(a=c[8], b=d[8], sel=andSel, out=mux29Out);
    Mux(a=mux19Out, b=mux29Out, sel=sel[1], out=out[8]);

    Mux(a=a[9], b=b[9], sel=sel[0], out=mux110Out);
    Mux(a=c[9], b=d[9], sel=andSel, out=mux210Out);
    Mux(a=mux110Out, b=mux210Out, sel=sel[1], out=out[9]);

    Mux(a=a[10], b=b[10], sel=sel[0], out=mux111Out);
    Mux(a=c[10], b=d[10], sel=andSel, out=mux211Out);
    Mux(a=mux111Out, b=mux211Out, sel=sel[1], out=out[10]);

    Mux(a=a[11], b=b[11], sel=sel[0], out=mux112Out);
    Mux(a=c[11], b=d[11], sel=andSel, out=mux212Out);
    Mux(a=mux112Out, b=mux212Out, sel=sel[1], out=out[11]);

    Mux(a=a[12], b=b[12], sel=sel[0], out=mux113Out);
    Mux(a=c[12], b=d[12], sel=andSel, out=mux213Out);
    Mux(a=mux113Out, b=mux213Out, sel=sel[1], out=out[12]);

    Mux(a=a[13], b=b[13], sel=sel[0], out=mux114Out);
    Mux(a=c[13], b=d[13], sel=andSel, out=mux214Out);
    Mux(a=mux114Out, b=mux214Out, sel=sel[1], out=out[13]);

    Mux(a=a[14], b=b[14], sel=sel[0], out=mux115Out);
    Mux(a=c[14], b=d[14], sel=andSel, out=mux215Out);
    Mux(a=mux115Out, b=mux215Out, sel=sel[1], out=out[14]);

    Mux(a=a[15], b=b[15], sel=sel[0], out=mux116Out);
    Mux(a=c[15], b=d[15], sel=andSel, out=mux216Out);
    Mux(a=mux116Out, b=mux216Out, sel=sel[1], out=out[15]);
}